// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cEHjHBABazmDxgQhPGAjL
// Component: U3TgOcVpMC2
import * as React from "react";

import { Link, GatsbyLinkProps as LinkProps } from "gatsby";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import * as plasmic_new_habistack_com_css from "../new_habistack_com/plasmic_new_habistack_com.module.css"; // plasmic-import: rcEGNgTfxT6W6gDjnxsJgN/projectcss
import * as plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import * as projectcss from "./plasmic_habistack_marketing.module.css"; // plasmic-import: cEHjHBABazmDxgQhPGAjL/projectcss
import * as sty from "./PlasmicNewFathymFooter.module.css"; // plasmic-import: U3TgOcVpMC2/css

import TwitterIconsvgIcon from "./icons/PlasmicIcon__TwitterIconsvg"; // plasmic-import: uxO24Qv3YAYK_B/icon
import GithubIconsvgIcon from "./icons/PlasmicIcon__GithubIconsvg"; // plasmic-import: gx9G7dWZcmY3jw/icon
import FacebookIconIcon from "../new_habistack_com/icons/PlasmicIcon__FacebookIcon"; // plasmic-import: AJL_5Hbt1wN1Ed/icon
import fathymLogoAqua01400PxlspngOHhrboXuD1Vys from "../new_habistack_com/images/fathymLogoAqua01400Pxlspng.png"; // plasmic-import: O-HHRBOXuD1vys/picture
import copyrightIconPzX6Qreze5WXr from "../new_habistack_com/images/copyrightIcon.png"; // plasmic-import: PzX6QREZE5_wXR/picture

export type PlasmicNewFathymFooter__VariantMembers = {};
export type PlasmicNewFathymFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewFathymFooter__VariantsArgs;
export const PlasmicNewFathymFooter__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNewFathymFooter__ArgsType = {};
type ArgPropType = keyof PlasmicNewFathymFooter__ArgsType;
export const PlasmicNewFathymFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicNewFathymFooter__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultNewFathymFooterProps {
  className?: string;
}

function PlasmicNewFathymFooter__RenderFunc(props: {
  variants: PlasmicNewFathymFooter__VariantsArgs;
  args: PlasmicNewFathymFooter__ArgsType;
  overrides: PlasmicNewFathymFooter__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_new_habistack_com_css.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__rsN8H)}>
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__xzQyp)}
          displayHeight={"75px" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"233px" as const}
          loading={"lazy" as const}
          src={{
            src: fathymLogoAqua01400PxlspngOHhrboXuD1Vys,
            fullWidth: 400,
            fullHeight: 129,
            aspectRatio: undefined
          }}
        />

        <div className={classNames(projectcss.all, sty.freeBox__ohLpV)}>
          <div className={classNames(projectcss.all, sty.freeBox__jg4Wh)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__edGhe
              )}
            >
              {"Products"}
            </div>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___4SLIl
              )}
              component={Link}
              href={"https://www.fathym.com/" as const}
              platform={"gatsby"}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#000000" }}
                >
                  {"Fathym Platform"}
                </span>
              </React.Fragment>
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__qQvB
              )}
              component={Link}
              href={"https://www.fathym.com/iot" as const}
              platform={"gatsby"}
            >
              {"IoT Ensemble"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__gQAkq
              )}
              component={Link}
              href={"https://www.fathym.com/forecast/" as const}
              platform={"gatsby"}
            >
              {"Habistack"}
            </p.PlasmicLink>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__zyHmt)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__t8JTr
              )}
            >
              {"Resources"}
            </div>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___3Yupj
              )}
              component={Link}
              href={"https://www.fathym.com/docs/" as const}
              platform={"gatsby"}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#000000" }}
                >
                  {"Docs"}
                </span>
              </React.Fragment>
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__m3BhD
              )}
              component={Link}
              href={"https://www.fathym.com/blog/" as const}
              platform={"gatsby"}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#000000" }}
                >
                  {"Blog"}
                </span>
              </React.Fragment>
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__qIgpc
              )}
              component={Link}
              href={"mailto:support@fathym.com" as const}
              platform={"gatsby"}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#000000" }}
                >
                  {"Support"}
                </span>
              </React.Fragment>
            </p.PlasmicLink>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__g65Wr)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mE8S
              )}
            >
              {"Company"}
            </div>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___3Fk4X
              )}
              component={Link}
              href={"https://www.fathym.com/enterprise-agreement" as const}
              platform={"gatsby"}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#000000" }}
                >
                  {"Enterprise Agreement"}
                </span>
              </React.Fragment>
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___0Kugc
              )}
              component={Link}
              href={"https://www.fathym.com/terms-of-services/" as const}
              platform={"gatsby"}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#000000" }}
                >
                  {"Terms of Service"}
                </span>
              </React.Fragment>
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__gBvbd
              )}
              component={Link}
              href={"https://www.fathym.com/terms-of-services/" as const}
              platform={"gatsby"}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#000000" }}
                >
                  {"Privacy Policy"}
                </span>
              </React.Fragment>
            </p.PlasmicLink>
          </div>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__eYqT9)}>
          <div className={classNames(projectcss.all, sty.freeBox__cDylr)}>
            {true ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fLeR3
                )}
              >
                {"Copyright"}
              </div>
            ) : null}

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___9RYik)}
              displayHeight={"24px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"18px" as const}
              loading={"lazy" as const}
              src={{
                src: copyrightIconPzX6Qreze5WXr,
                fullWidth: 24,
                fullHeight: 24,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eiJ4D
              )}
            >
              {" 2022 Fathym. \nAll rights reserved."}
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__pJl0G)}>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___5AcPq
              )}
              component={Link}
              href={"https://twitter.com/FathymIt" as const}
              platform={"gatsby"}
            >
              <TwitterIconsvgIcon
                className={classNames(projectcss.all, sty.svg__yvnoL)}
                role={"img"}
              />
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__gtWTg
              )}
              component={Link}
              href={"https://github.com/fathym" as const}
              platform={"gatsby"}
            >
              <GithubIconsvgIcon
                className={classNames(projectcss.all, sty.svg__lfNqZ)}
                role={"img"}
              />
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__oSgDt
              )}
              component={Link}
              href={"https://www.facebook.com/FathymInc/" as const}
              platform={"gatsby"}
            >
              <FacebookIconIcon
                className={classNames(projectcss.all, sty.svg___25Mu5)}
                role={"img"}
              />
            </p.PlasmicLink>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewFathymFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewFathymFooter__VariantsArgs;
    args?: PlasmicNewFathymFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewFathymFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewFathymFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewFathymFooter__ArgProps,
          internalVariantPropNames: PlasmicNewFathymFooter__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNewFathymFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewFathymFooter";
  } else {
    func.displayName = `PlasmicNewFathymFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicNewFathymFooter = Object.assign(
  // Top-level PlasmicNewFathymFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicNewFathymFooter
    internalVariantProps: PlasmicNewFathymFooter__VariantProps,
    internalArgProps: PlasmicNewFathymFooter__ArgProps
  }
);

export default PlasmicNewFathymFooter;
/* prettier-ignore-end */
