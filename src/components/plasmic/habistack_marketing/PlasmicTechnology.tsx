// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cEHjHBABazmDxgQhPGAjL
// Component: 82gydHNsthD
import * as React from "react";

import { Link, GatsbyLinkProps as LinkProps } from "gatsby";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: R_HdThxqzC5TC/component

import "@plasmicapp/react-web/lib/plasmic.css";

import * as plasmic_new_habistack_com_css from "../new_habistack_com/plasmic_new_habistack_com.module.css"; // plasmic-import: rcEGNgTfxT6W6gDjnxsJgN/projectcss
import * as plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import * as projectcss from "./plasmic_habistack_marketing.module.css"; // plasmic-import: cEHjHBABazmDxgQhPGAjL/projectcss
import * as sty from "./PlasmicTechnology.module.css"; // plasmic-import: 82gydHNsthD/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: -19ZIVv2nz3-RT/icon
import ArrowRightsvgIcon from "./icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: g9tUy9gczA-WH2/icon
import cloudNativepngCElXuQg9N from "./images/cloudNativepng.png"; // plasmic-import: CElXUQg9N/picture
import ioTSensedpngHJ7StTJwQ from "./images/ioTSensedpng.png"; // plasmic-import: hJ7StTJwQ/picture
import multiDatapngUtVlnM6Ev from "./images/multiDatapng.png"; // plasmic-import: utVlnM6Ev/picture
import microMacropngCD5NRWomj from "./images/microMacropng.png"; // plasmic-import: cD5nRWomj/picture
import oursYourspng9X7N0Yk7I from "./images/oursYourspng.png"; // plasmic-import: 9X7n0YK7I/picture
import bespokeApppng8BKp0FOcB from "./images/bespokeApppng.png"; // plasmic-import: 8bKp0FOcB/picture

export type PlasmicTechnology__VariantMembers = {};
export type PlasmicTechnology__VariantsArgs = {};
type VariantPropType = keyof PlasmicTechnology__VariantsArgs;
export const PlasmicTechnology__VariantProps = new Array<VariantPropType>();

export type PlasmicTechnology__ArgsType = {};
type ArgPropType = keyof PlasmicTechnology__ArgsType;
export const PlasmicTechnology__ArgProps = new Array<ArgPropType>();

export type PlasmicTechnology__OverridesType = {
  root?: p.Flex<"section">;
  h2?: p.Flex<"h2">;
};

export interface DefaultTechnologyProps {
  className?: string;
}

function PlasmicTechnology__RenderFunc(props: {
  variants: PlasmicTechnology__VariantsArgs;
  args: PlasmicTechnology__ArgsType;
  overrides: PlasmicTechnology__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_new_habistack_com_css.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.column__a4AIr)}>
        <h2
          data-plasmic-name={"h2"}
          data-plasmic-override={overrides.h2}
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.h2
          )}
        >
          {"< Let's Get (a little) Technical >"}
        </h2>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wcCen
          )}
        >
          {"Data born. Data taught. Data driven."}
        </div>

        <div className={classNames(projectcss.all, sty.columns__fzYzz)}>
          <div className={classNames(projectcss.all, sty.column__xcvjG)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__x1Qz)}
              displayHeight={"230px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: cloudNativepngCElXuQg9N,
                fullWidth: 850,
                fullHeight: 375,
                aspectRatio: undefined
              }}
            />

            <div className={classNames(projectcss.all, sty.columns__ufZwO)}>
              <div className={classNames(projectcss.all, sty.column__u4BMo)}>
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__e70Jg
                  )}
                >
                  {"Cloud Native"}
                </h4>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p9Fep
                  )}
                >
                  {"Always Web + ML"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yZrah
                  )}
                >
                  {
                    "Our heads may have always been stuck in the clouds, but we live where the physical environment meets the silicon environment."
                  }
                </div>

                {true ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__tetjK)}
                    color={"softBlue" as const}
                    endIcon={
                      <ArrowRightsvgIcon
                        className={classNames(projectcss.all, sty.svg__mozCw)}
                        role={"img"}
                      />
                    }
                    shape={"rounded" as const}
                    showEndIcon={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2DIof
                      )}
                    >
                      {"READ MORE"}
                    </div>
                  </Button>
                ) : null}
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.column__bjNg2)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__fg7Or)}
              displayHeight={"230px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: ioTSensedpngHJ7StTJwQ,
                fullWidth: 850,
                fullHeight: 375,
                aspectRatio: undefined
              }}
            />

            <div className={classNames(projectcss.all, sty.columns__qpkgY)}>
              <div className={classNames(projectcss.all, sty.column__tLBlP)}>
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__jkStD
                  )}
                >
                  {"Data & IoT"}
                </h4>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___97V8K
                  )}
                >
                  {"Not Just Our Two Sense"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___46Umt
                  )}
                >
                  {
                    "We're bringing more than just another weather station - what sensors do you need sensed and made sense of?\n"
                  }
                </div>

                {true ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__fuEs)}
                    color={"softBlue" as const}
                    endIcon={
                      <ArrowRightsvgIcon
                        className={classNames(projectcss.all, sty.svg__daDvV)}
                        role={"img"}
                      />
                    }
                    shape={"rounded" as const}
                    showEndIcon={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ryQZg
                      )}
                    >
                      {"READ MORE"}
                    </div>
                  </Button>
                ) : null}
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.column__suu5C)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__lQLt)}
              displayHeight={"230px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: multiDatapngUtVlnM6Ev,
                fullWidth: 850,
                fullHeight: 375,
                aspectRatio: undefined
              }}
            />

            <div className={classNames(projectcss.all, sty.columns__z86Uu)}>
              <div className={classNames(projectcss.all, sty.column__fe2Ub)}>
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__pn8Uk
                  )}
                >
                  {"Multiple Data Feeds"}
                </h4>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__b4G6X
                  )}
                >
                  {"BYOD"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__x4KSs
                  )}
                >
                  {
                    "We have lots of data, but maybe our data isn't enough to get you to the solution you need. We play nice with your data too.\n"
                  }
                </div>

                {true ? (
                  <Button
                    className={classNames("__wab_instance", sty.button___8IOs)}
                    color={"softBlue" as const}
                    endIcon={
                      <ArrowRightsvgIcon
                        className={classNames(projectcss.all, sty.svg__zo9Hk)}
                        role={"img"}
                      />
                    }
                    shape={"rounded" as const}
                    showEndIcon={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__t7VX
                      )}
                    >
                      {"READ MORE"}
                    </div>
                  </Button>
                ) : null}
              </div>
            </div>
          </div>
        </div>

        <div className={classNames(projectcss.all, sty.columns___3XAm)}>
          <div className={classNames(projectcss.all, sty.column__qvjt9)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__zxfSz)}
              displayHeight={"230px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: microMacropngCD5NRWomj,
                fullWidth: 850,
                fullHeight: 375,
                aspectRatio: undefined
              }}
            />

            <div className={classNames(projectcss.all, sty.columns__juH5S)}>
              <div className={classNames(projectcss.all, sty.column__mvg3R)}>
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__e5Uhp
                  )}
                >
                  {"Micro to Macro"}
                </h4>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uhJmt
                  )}
                >
                  {"Hyper Local to 10,000ft"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mwrjf
                  )}
                >
                  {
                    "A few miles up to a few inches off the ground. County-wide or just your front door. Flexible data modeled flexibly.\n"
                  }
                </div>

                {true ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__pSKp)}
                    color={"softBlue" as const}
                    endIcon={
                      <ArrowRightsvgIcon
                        className={classNames(projectcss.all, sty.svg__sIhwB)}
                        role={"img"}
                      />
                    }
                    shape={"rounded" as const}
                    showEndIcon={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zXC3
                      )}
                    >
                      {"READ MORE"}
                    </div>
                  </Button>
                ) : null}
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.column__cXXi)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__u1NXf)}
              displayHeight={"230px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: oursYourspng9X7N0Yk7I,
                fullWidth: 850,
                fullHeight: 375,
                aspectRatio: undefined
              }}
            />

            <div className={classNames(projectcss.all, sty.columns__iTCu)}>
              <div className={classNames(projectcss.all, sty.column__mZjIb)}>
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__bLipE
                  )}
                >
                  {"Our Cloud or Yours"}
                </h4>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rjH1P
                  )}
                >
                  {"SaaS or Licensed"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__k9A8U
                  )}
                >
                  {
                    "From a cost-conscious, worry-free, hosted SaaS API to being licensed in your Cloud with your protected IP. Options.\n"
                  }
                </div>

                {true ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__f4Eno)}
                    color={"softBlue" as const}
                    endIcon={
                      <ArrowRightsvgIcon
                        className={classNames(projectcss.all, sty.svg__cavXf)}
                        role={"img"}
                      />
                    }
                    shape={"rounded" as const}
                    showEndIcon={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qAyf
                      )}
                    >
                      {"READ MORE"}
                    </div>
                  </Button>
                ) : null}
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.column__jvSif)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__mQoBr)}
              displayHeight={"230px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: bespokeApppng8BKp0FOcB,
                fullWidth: 850,
                fullHeight: 375,
                aspectRatio: undefined
              }}
            />

            <div className={classNames(projectcss.all, sty.columns__dHxcx)}>
              <div className={classNames(projectcss.all, sty.column__se6T3)}>
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__nc8Wo
                  )}
                >
                  {"An App for That"}
                </h4>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__j03Dv
                  )}
                >
                  {"Bespoke, Boutique, un-Biased"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xH7Na
                  )}
                >
                  {
                    "If we don't have the app you need, we have the building blocks behind the scenes to get you there. Tell us what you're looking for."
                  }
                </div>

                {true ? (
                  <Button
                    className={classNames("__wab_instance", sty.button___0Id0C)}
                    color={"softBlue" as const}
                    endIcon={
                      <ArrowRightsvgIcon
                        className={classNames(projectcss.all, sty.svg__sX0Px)}
                        role={"img"}
                      />
                    }
                    shape={"rounded" as const}
                    showEndIcon={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__szZxy
                      )}
                    >
                      {"READ MORE"}
                    </div>
                  </Button>
                ) : null}
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h2"],
  h2: ["h2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  h2: "h2";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTechnology__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTechnology__VariantsArgs;
    args?: PlasmicTechnology__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTechnology__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTechnology__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTechnology__ArgProps,
          internalVariantPropNames: PlasmicTechnology__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicTechnology__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTechnology";
  } else {
    func.displayName = `PlasmicTechnology.${nodeName}`;
  }
  return func;
}

export const PlasmicTechnology = Object.assign(
  // Top-level PlasmicTechnology renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),

    // Metadata about props expected for PlasmicTechnology
    internalVariantProps: PlasmicTechnology__VariantProps,
    internalArgProps: PlasmicTechnology__ArgProps
  }
);

export default PlasmicTechnology;
/* prettier-ignore-end */
