// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uF97AywdKV5Lj8hEqbdmwm
// Component: 7EWiawwUIdDZ
import * as React from "react";

import { Link, GatsbyLinkProps as LinkProps } from "gatsby";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: Gh3AiRI-CQfkcb/component
import NewFathymFooter from "../../NewFathymFooter"; // plasmic-import: U3TgOcVpMC2/component

import "@plasmicapp/react-web/lib/plasmic.css";

import * as plasmic_habistack_marketing_css from "../habistack_marketing/plasmic_habistack_marketing.module.css"; // plasmic-import: cEHjHBABazmDxgQhPGAjL/projectcss
import * as plasmic_new_habistack_com_css from "../new_habistack_com/plasmic_new_habistack_com.module.css"; // plasmic-import: rcEGNgTfxT6W6gDjnxsJgN/projectcss
import * as plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import * as projectcss from "./plasmic_experiment.module.css"; // plasmic-import: uF97AywdKV5Lj8hEqbdmwm/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: 7EWiawwUIdDZ/css

import microsoftTeamsImage24PngFjJwZLmc7 from "./images/microsoftTeamsImage24Png.png"; // plasmic-import: FjJwZLmc7/picture
import microsoftTeamsImage23PngNq2JvXq1S from "./images/microsoftTeamsImage23Png.png"; // plasmic-import: nq2JvXq1s/picture
import microsoftTeamsImage18PngC8EgbrNdx from "./images/microsoftTeamsImage18Png.png"; // plasmic-import: c8EgbrNdx/picture
import microsoftTeamsImage17PngCvDDipfcA from "./images/microsoftTeamsImage17Png.png"; // plasmic-import: cvDDipfcA/picture
import microsoftTeamsImage21PngPdLm6WsJ8 from "./images/microsoftTeamsImage21Png.png"; // plasmic-import: PdLm6wsJ8/picture

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  section?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  h4?: p.Flex<"h4">;
  newFathymFooter?: p.Flex<typeof NewFathymFooter>;
};

export interface DefaultHomepageProps {
  className?: string;
}

export function Head() {
  return <></>;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            plasmic_habistack_marketing_css.plasmic_tokens,
            plasmic_new_habistack_com_css.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Taming cloud complexity."}
            </h1>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tcLyq
              )}
            >
              {"Fathym gives you cloud-native, out-of-the-box. "}
            </div>
          </p.Stack>

          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__o55Ky)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: microsoftTeamsImage24PngFjJwZLmc7,
              fullWidth: 3412,
              fullHeight: 2271,
              aspectRatio: undefined
            }}
          />

          <div className={classNames(projectcss.all, sty.columns___1UEdG)}>
            <div className={classNames(projectcss.all, sty.column___3Fx8C)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__xtjgq)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: microsoftTeamsImage23PngNq2JvXq1S,
                  fullWidth: 3542,
                  fullHeight: 1563,
                  aspectRatio: undefined
                }}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column___7R3Sw)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__sc40Q)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: microsoftTeamsImage18PngC8EgbrNdx,
                  fullWidth: 3542,
                  fullHeight: 1563,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__y578L
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <h4
                  data-plasmic-name={"h4"}
                  data-plasmic-override={overrides.h4}
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        "We set up a cloud out-of-the-box so you don't have to. "
                      }
                    </span>
                  </React.Fragment>
                </h4>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>

          <div className={classNames(projectcss.all, sty.columns__nswil)}>
            <div className={classNames(projectcss.all, sty.column__nsk0)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__fJC)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: microsoftTeamsImage17PngCvDDipfcA,
                  fullWidth: 3542,
                  fullHeight: 1563,
                  aspectRatio: undefined
                }}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__ewyu)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__s5MsQ)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: microsoftTeamsImage21PngPdLm6WsJ8,
                  fullWidth: 3542,
                  fullHeight: 1563,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>

          <NewFathymFooter
            data-plasmic-name={"newFathymFooter"}
            data-plasmic-override={overrides.newFathymFooter}
            className={classNames("__wab_instance", sty.newFathymFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "section", "h1", "h4", "newFathymFooter"],
  header: ["header"],
  section: ["section", "h1"],
  h1: ["h1"],
  h4: ["h4"],
  newFathymFooter: ["newFathymFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  section: "section";
  h1: "h1";
  h4: "h4";
  newFathymFooter: typeof NewFathymFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    h4: makeNodeComponent("h4"),
    newFathymFooter: makeNodeComponent("newFathymFooter"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
