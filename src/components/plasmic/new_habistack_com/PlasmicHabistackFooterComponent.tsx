// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rcEGNgTfxT6W6gDjnxsJgN
// Component: oRUnjdUovS
import * as React from "react";

import { Link, GatsbyLinkProps as LinkProps } from "gatsby";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import FathymFooter from "../../FathymFooter"; // plasmic-import: fpAiM6T_26Q9w_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import * as plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import * as projectcss from "./plasmic_new_habistack_com.module.css"; // plasmic-import: rcEGNgTfxT6W6gDjnxsJgN/projectcss
import * as sty from "./PlasmicHabistackFooterComponent.module.css"; // plasmic-import: oRUnjdUovS/css

export type PlasmicHabistackFooterComponent__VariantMembers = {};
export type PlasmicHabistackFooterComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicHabistackFooterComponent__VariantsArgs;
export const PlasmicHabistackFooterComponent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHabistackFooterComponent__ArgsType = {};
type ArgPropType = keyof PlasmicHabistackFooterComponent__ArgsType;
export const PlasmicHabistackFooterComponent__ArgProps =
  new Array<ArgPropType>();

export type PlasmicHabistackFooterComponent__OverridesType = {
  root?: p.Flex<typeof FathymFooter>;
};

export interface DefaultHabistackFooterComponentProps {
  className?: string;
}

function PlasmicHabistackFooterComponent__RenderFunc(props: {
  variants: PlasmicHabistackFooterComponent__VariantsArgs;
  args: PlasmicHabistackFooterComponent__ArgsType;
  overrides: PlasmicHabistackFooterComponent__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(() => [], [$props]);
  const $state = p.useDollarState(stateSpecs, $props);

  return (
    true ? (
      <FathymFooter
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames("__wab_instance", sty.root)}
      />
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: typeof FathymFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHabistackFooterComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHabistackFooterComponent__VariantsArgs;
    args?: PlasmicHabistackFooterComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHabistackFooterComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHabistackFooterComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHabistackFooterComponent__ArgProps,
          internalVariantPropNames:
            PlasmicHabistackFooterComponent__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHabistackFooterComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHabistackFooterComponent";
  } else {
    func.displayName = `PlasmicHabistackFooterComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicHabistackFooterComponent = Object.assign(
  // Top-level PlasmicHabistackFooterComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicHabistackFooterComponent
    internalVariantProps: PlasmicHabistackFooterComponent__VariantProps,
    internalArgProps: PlasmicHabistackFooterComponent__ArgProps
  }
);

export default PlasmicHabistackFooterComponent;
/* prettier-ignore-end */
